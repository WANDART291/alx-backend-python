pipeline {
  agent any

  environment {
    DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds') // Jenkins credential ID
    GITHUB_CREDENTIALS = credentials('github-ssh') // optional
    IMAGE_NAME = "your-dockerhub-username/messaging_app"
    IMAGE_TAG = "${env.BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/<your-username>/alx-backend-python.git']]])
      }
    }

    stage('Install deps & Run tests') {
      steps {
        sh '''
          python -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install -r messaging_app/requirements.txt
          pip install pytest pytest-cov
          cd messaging_app
          pytest --junitxml=report.xml --cov=./ --cov-report=xml
        '''
        // Archive test results for Jenkins
      }
      post {
        always {
          junit 'messaging_app/report.xml'
          archiveArtifacts artifacts: 'messaging_app/htmlcov/**', allowEmptyArchive: true
        }
      }
    }

    stage('Build Docker image') {
      steps {
        script {
          // Build image
          sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} messaging_app/"
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        sh """
          echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
          docker push ${IMAGE_NAME}:${IMAGE_TAG}
        """
      }
    }
  }

  post {
    success {
      echo "Pipeline succeeded."
    }
    failure {
      echo "Pipeline failed."
    }
  }
}

