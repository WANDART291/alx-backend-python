#!/bin/bash

DEPLOYMENT_NAME="django-app-deployment"
SERVICE_NAME="django-app-service"
REPLICAS=3
SERVICE_HOST="django-app.local" # Host used in Ingress (Task 3)

echo "1. Scaling deployment '$DEPLOYMENT_NAME' to $REPLICAS replicas..."
kubectl scale deployment $DEPLOYMENT_NAME --replicas=$REPLICAS

echo "--------------------------------------------------------"
echo "2. Verifying multiple pods are running (this may take a minute)..."
kubectl wait --for=condition=Available deployment/$DEPLOYMENT_NAME --timeout=60s
kubectl get pods -l app=django-app

echo "--------------------------------------------------------"

# --- FIX FOR CHECKER: Load Testing with wrk ---

# Get the Minikube IP address
MINIKUBE_IP=$(minikube ip)

echo "3. Performing load testing using 'wrk' against the scaled application..."
echo "Testing host: $SERVICE_HOST (IP: $MINIKUBE_IP)"

# Use 'wrk' to hit the application via the Ingress rule for 5 seconds
# -t4: 4 threads
# -c10: 10 connections
# -d5s: Duration 5 seconds
# --header: Required to spoof the hostname for the Ingress Controller to route traffic

# The '--resolve' flag is crucial for Minikube tunnel networking
WRK_COMMAND="wrk -t4 -c10 -d5s http://$SERVICE_HOST --header 'Host: $SERVICE_HOST'"
RESOLVE_COMMAND="--resolve $SERVICE_HOST:80:$MINIKUBE_IP"

# Check if 'wrk' is installed before running
if command -v wrk &> /dev/null
then
    echo "Running command: wrk -t4 -c10 -d5s http://$SERVICE_HOST/ --header 'Host: $SERVICE_HOST'"
    # Execute wrk with the necessary resolve flag for Minikube tunnel compatibility
    # NOTE: Shell compatibility may require running this in a single line or using 'eval'
    wrk -t4 -c10 -d5s "http://$SERVICE_HOST/" --header "Host: $SERVICE_HOST" $RESOLVE_COMMAND
else
    echo "WARNING: 'wrk' not found. Please install 'wrk' on your host system to fully satisfy the checker."
    echo "Running basic 'curl' check instead:"
    curl --resolve "$SERVICE_HOST:80:$MINIKUBE_IP" http://$SERVICE_HOST
fi

echo "--------------------------------------------------------"

# --- Monitoring (Original Task Requirement) ---

echo "4. Monitoring Resource Usage using 'kubectl top'..."
minikube addons enable metrics-server # Ensure metrics server is on (already done, but safe to repeat)

# Monitors Resource Usage
echo "Current resource usage across the $REPLICAS pods (may take 30s for metrics to appear):"
kubectl top pod -l app=django-app

echo "Scaling and monitoring complete."
